// lib_scan_utils
// This script provides utility functions for scanning libraries for vulnerabilities.

nl = "
"

run_scanner = function(lib, memory_zone)
	output = metaxploit.scan_address(lib, memory_zone)
	vulnerabilities = output.split("\n\n")
	
	for vuln in vulnerabilities
		var_from = vuln.indexOf("<b>")
		var_to = vuln.indexOf("</b>")
		if var_from == null then continue // Means it's not relevant to the actual output
		
		var_code = vuln[var_from+3:var_to]
		conditions_list = []
		
		for line in vuln.split("\n")
			if line.indexOf("*") != null then
				conditions_list.push(line)
			end if
		end for
		
		if conditions_list.len > 0 then
			for idx in range(0, conditions_list.len-1)
				if idx < conditions_list.len-1 then
					conditions_list[idx] = "|- " + conditions_list[idx][2:].replace("\n", "")
				else
					conditions_list[idx] = "'- " + conditions_list[idx][2:].replace("\n", "")
				end if
			end for
		end if
		
		make_vuln_data_row(lib, memory_zone, var_code, conditions_list.join("{nl_slot}"), "", "")
	end for
	
end function

get_cached_vuln_data_str = function(lib)
	
	data = _get_vuln_data() // Ensure the vuln_data is filled before printing
	all_rows = []
	for row in data
		if row.lib == lib.lib_name+"v"+lib.version then
			
			all_rows.push(row)
		end if
	end for

	full_str = "\nMEMORY_ADDR UNSEC_VALUE ACCESS_TYPE ACCESS_LEVEL"
	last_memory_zone = ""
	for row in all_rows
		access_type = row.type
		access_level = row.access_level
		if access_type == "" then
			access_type = "Unknown"
		end if
		if access_level == "" then
			access_level = "Unknown"
		end if
		new_line = "\n<color=red>" + row.memory_zone + "</color> <color=yellow>" + row.unsec_val + "</color> " + access_type + " " + access_level
		
		if last_memory_zone != "" and row.memory_zone != last_memory_zone then
			new_line = "\n" + new_line // Add a new line if the memory zone changed
		end if

		new_line = format_columns(new_line)
		if row.conditions != "" then
			new_line = new_line + "\n<color=#bdbdbd>" + row.conditions.trim().replace("{quote_slot}", ",").replace("{nl_slot}", "</color>\n<color=#bdbdbd>")+"</color>"
		end if
		
		full_str = full_str + new_line
		last_memory_zone = row.memory_zone
	end for

	return full_str
end function

scan_lib = function(lib, should_generate_file=false)
	memory_zones = metaxploit.scan(lib)

	for zone in memory_zones
    	run_scanner(lib, zone)
    end for
	
	full_output = get_cached_vuln_data_str(lib)
	print(full_output)
	
	if should_generate_file then
		file_name = "lib_scan.txt"
		computer.touch(current_path, file_name)
		result_file = computer.File(file_name)
		result_file.set_content(full_output)
		print("Result dumped into " + file_name)
	end if
	
	return full_output
end function

_get_vuln_data = function()
	data = []

	data_file = get_shell.host_computer.File("/Tools/src/crash_lib/data/vuln_data.csv")
	if data_file == null then return []

	lines = data_file.get_content.split("{separator_slot}")
	if lines.len <= 1 then return []


	for line in lines[1:] // Skip header
		parts = line.split(",")
		if parts.len < 6 then continue // Invalid line
		conditions = parts[3].replace("{quote_slot}", ",").split(nl)
		
		row = {
			"lib": parts[0].trim(),
			"memory_zone": parts[1].trim(),
			"unsec_val": parts[2].trim(),
			"conditions": conditions.join(""),
			"type": parts[4].trim(),
			"access_level": parts[5].trim(),
		}
		data.push(row)
	end for
	return data
end function

save_vuln_data = function(vuln_data)
	data_file = get_shell.host_computer.File("/Tools/src/crash_lib/data/vuln_data.csv")
	if data_file == null then return

	output = "lib,memory_zone,unsec_val,conditions,type,access_level{separator_slot}"
	for row in vuln_data
		output = output + row.lib + "," + row.memory_zone + "," + row.unsec_val + "," + row.conditions + "," + row.type + "," + row.access_level + "{separator_slot}"
	end for
	data_file.set_content(output)
end function

find_vuln_data_index_by_lib = function(metaLib, memory_zone, unsec_val)
	vuln_data = _get_vuln_data()
	if vuln_data.len == 0 then
		return -1
	end if
	for i in range(0, vuln_data.len-1)
		if vuln_data[i].lib == metaLib.lib_name+"v"+metaLib.version and vuln_data[i].memory_zone == memory_zone and vuln_data[i].unsec_val == unsec_val then
			return i
		end if
	end for
	return -1 // Not found
end function

find_vuln_data = function(metaLib, memory_zone, unsec_val)
	vuln_data = _get_vuln_data()
	index = find_vuln_data_index_by_lib(metaLib, memory_zone, unsec_val)
	if index == -1 then return null
	
	return vuln_data[index]
end function

make_vuln_data_row = function(metaLib, memory_zone, unsec_val, conditions="", access_type="", access_level="")
	vuln_data = _get_vuln_data()

	// First try to find the vulnerability
	vuln_index = find_vuln_data_index_by_lib(metaLib, memory_zone, unsec_val)
	old_row = {
		"lib": "",
		"memory_zone": "",
		"unsec_val": "",
		"type": "",
		"access_level": "",
		"conditions": "",
	}
	if vuln_index != -1 then 
		old_row = vuln_data[vuln_index]
	end if

	row = {
		"lib": metaLib.lib_name+"v"+metaLib.version,
		"memory_zone": memory_zone,
		"unsec_val": unsec_val,
		"type": access_type,
		"access_level": access_level,
		"conditions": conditions,
	}

	// Merge rows
	if row.lib != "" then old_row.lib = row.lib
	if row.memory_zone != "" then old_row.memory_zone = row.memory_zone
	if row.unsec_val != "" then old_row.unsec_val = row.unsec_val
	if row.type != "" then old_row.type = row.type
	if row.access_level != "" and old_row.access_level == "" then old_row.access_level = row.access_level
	if row.conditions != "" and old_row.conditions == "" then 
		old_row.conditions = row.conditions.trim().replace(",", "{quote_slot}")
	end if 
	if vuln_index != -1 then
		vuln_data[vuln_index] = old_row // Update existing row
	else
		vuln_data.push(old_row) // Add new row
	end if

	save_vuln_data(vuln_data)

	return old_row
end function