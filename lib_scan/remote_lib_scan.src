// remote_lib_scan
// This script scans a remote computer's library for vulnerabilities.

computer = get_shell.host_computer

import_code("/Tools/src/crash_lib/utils/argparse.src")
import_code("/Tools/src/crash_lib/utils/metaxploit.src")
import_code("/Tools/src/crash_lib/lib_scan/lib_scan_utils.src")

params_definition = [
	{"name": "ip_address", "flag":null, "flag_alt": null, "type":"str",  "default":null,}, 
	{"name": "port", "flag":null, "flag_alt": null, "type":"str",  "default":null,}, 
	{"name":"output",   "flag":"--output",  "flag_alt":"-o",  "type":"bool",  "default":false,},
	{"name":"cache", "flag":"--cache", "flag_alt":"-c",  "type":"bool", "default": false,},
]

params_map = parse_args(params, params_definition)
handle_help(params, params_definition, "Scan remote library for vulnerabilities")

address = params_map.ip_address
port = params_map.port.to_int
should_generate_file = params_map.output == true

// Start connection
net_session = metaxploit.net_use(address, port)
if not net_session then exit("Error: can't connect to net session")

// Use metaxploit to overflow a specific memory address
lib = net_session.dump_lib

if not lib then
	exit("Error: Library file not found or invalid.")
end if

if params_map.cache == true then
	print(get_cached_vuln_data_str(lib))
else
	scan_lib(lib, should_generate_file)
end if