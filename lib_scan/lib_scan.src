// lib_scan
// This script scans a computer's library for vulnerabilities.
	
computer = get_shell.host_computer

import_code("/Tools/src/crash_lib/utils/argparse.src")
import_code("/Tools/src/crash_lib/utils/metaxploit.src")
import_code("/Tools/src/crash_lib/lib_scan/lib_scan_utils.src")

params_definition = [
	{"name": "lib_file", "flag":null, "flag_alt": null, "type":"str",  "default":null,}, 
	{"name":"output",   "flag":"--output",  "flag_alt":"-o",  "type":"bool",  "default":false,},
	{"name":"cache", "flag":"--cache", "flag_alt":"-c",  "type":"bool", "default": false,},
]

params_map = parse_args(params, params_definition)
handle_help(params, params_definition, "Scan Library for vulnerabilities")

lib_file = params_map.lib_file
should_generate_file = params_map.output == true


// Use metaxploit to overflow a specific memory address
lib = metaxploit.load(current_path + "/" + lib_file)
if not lib then
	lib = metaxploit.load(lib_file)
end if


if not lib then
	exit("Error: Library file not found or invalid.")
end if

if params_map.cache == true then
	print(get_cached_vuln_data_str(lib))
else
	scan_lib(lib, should_generate_file)
end if
