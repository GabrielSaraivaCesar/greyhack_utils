// file_explorer
// This script provides a set of functions to interact with files and folders using the terminal.

parse_params_list = function(params_list_list, names)
	params_list_map = {}
	for idx in range(0, names.len-1)
		params_list_map[names[idx]] = params_list_list[idx]
	end for
	return params_list_map
end function

_allow_import = function(file, params_list)
	return file.allow_import
end function
	
_chmod = function(file, params_list)
	if params_list.len == 1 then
		params_list.push("false")
	end if
	params_list = parse_params_list(params_list, ["permissions", "isRecursive"])

	return file.chmod(params_list.permissions, params_list.isRecursive == "true")
end function

_copy = function(file, params_list)
	params_list = parse_params_list(params_list, ["path", "file_new_name"])
	return file.copy(params_list.path, params_list.file_new_name)
end function

_delete = function(file, params_list)
	return file.delete()
end function

_get_content = function(file, params_list)
	return file.get_content()
end function

_get_folders = function(file, params_list)
	output = "Folders in " + file.name + ":\n"
	for inner_folder in file.get_folders
		output = output + "  - " + inner_folder.name + "/\n"
	end for
	print(output)
	return ""
end function

_get_files = function(file, params_list)
	output = "Files in " + file.name + ":\n"
	for inner_file in file.get_files
		output = output + "  - " + inner_file.name + "\n"
	end for
	print(output)
	return ""
end function

_group = function(file, params_list)
	return file.group
end function

_has_permission = function(file, params_list)
	params_list = parse_params_list(params_list, ["type_perm"])
	return file.has_permission(params_list.type_perm)
end function

_is_binary = function(file, params_list)
	return file.is_binary
end function

_is_folder = function(file, params_list)
	return file.is_folder
end function

_is_symlink = function(file, params_list)
	return file.is_symlink
end function

_move = function(file, params_list)
	params_list = parse_params_list(params_list, ["path", "file_new_name"])
	return file.move(params_list.path, params_list.file_new_name)
end function

_name = function(file, params_list)
	return file.name
end function

_owner = function(file, params_list)
	return file.owner
end function

_parent = function(file, params_list)
	return file.parent.name
end function

_path = function(file, params_list)
	if params_list.len == 0 then
		params_list.push("false")
	end if
	params_list = parse_params_list(params_list, ["symlinkOrigPath"])
	return file.path(params_list.symlinkOrigPath == "true")
end function

_permissions = function(file, params_list)
	return file.permissions
end function

_file_rename = function(file, params_list)
	params_list = parse_params_list(params_list, ["new_name"])
	return file.rename(params_list.new_name)
end function

_file_set_content = function(file, params_list)
	params_list = parse_params_list(params_list, ["text"])
	return file.set_content(params_list.text)
end function

_file_set_group = function(file, params_list)
	if params_list.len == 1 then
		params_list.push("false")
	end if
	params_list = parse_params_list(params_list, ["groupname", "isRecursive"])
	return file.set_group(params_list.groupname, params_list.isRecursive == "true")
end function

_file_set_owner = function(file, params_list)
	if params_list.len == 1 then
		params_list.push("false")
	end if
	params_list = parse_params_list(params_list, ["ownername", "isRecursive"])
	return file.set_owner(params_list.ownername, params_list.isRecursive == "true")
end function

_file_size = function(file, params_list)
	return file.size
end function
	
_ls_file = function(folder, params_list)
	if folder.is_folder == false then
		return "This is not a folder."
	end if
	
	inner_folders = folder.get_folders
	inner_files = folder.get_files

	output = "Folders:\n"
	if inner_folders.len > 0 then
		for inner_folder in inner_folders
			r = "<color=green>R</color>"
			w = "<color=green>W</color>"
			x = "<color=green>X</color>"
			if inner_folder.has_permission("r") == false then r = "<color=red>R</color>"
			if inner_folder.has_permission("w") == false then w = "<color=red>W</color>"
			if inner_folder.has_permission("x") == false then x = "<color=red>X</color>"
			permissions_str = r + w + x

			output = output + "  - <b>" + inner_folder.name + "</b>/ "+permissions_str+"\n"
		end for
	end if
	
	if inner_files.len > 0 then
		for inner_file in inner_files
			r = "<color=green>R</color>"
			w = "<color=green>W</color>"
			x = "<color=green>X</color>"
			if inner_file.has_permission("r") == false then r = "<color=red>R</color>"
			if inner_file.has_permission("w") == false then w = "<color=red>W</color>"
			if inner_file.has_permission("x") == false then x = "<color=red>X</color>"
			permissions_str = r + w + x

			output = output + "  - <b>" + inner_file.name + "</b> "+permissions_str+"\n"
		end for
	end if

	print(output)
	return "" 
end function

_set_symlink = function(file, params_list)
	params_list = parse_params_list(params_list, ["path", "file_new_name"])
	return file.symlink(params_list.path, params_list.file_new_name)
end function

_file_cd = function(folder, params_list)
	params_list = parse_params_list(params_list, ["path"])
	current_file = folder
	if params_list.path == ".." then
		if folder.parent == null then
			return folder
		else
			current_file = folder.parent
		end if
	else
		inner_folders = folder.get_folders
		inner_files = folder.get_files

		for inner_folder in inner_folders
			if inner_folder.name == params_list.path then
				current_file = inner_folder
				break
			end if
		end for
		for inner_file in inner_files
			if inner_file.name == params_list.path then
				current_file = inner_file
				break
			end if
		end for
	end if

	return current_file
end function

_file_decipher = function(file, params_list)
	if crypto == null then
		return "Crypto library not found. Please install the crypto library to use this command."
	end if
	if file.is_binary then
		return "This file is binary."
	end if
	if file.is_folder then
		return "This is a folder, not a file."
	end if
	
	content = file.get_content()
	if content == "" then
		return "The file is empty."
	end if
	if content == null then
		return "The cannot be read."
	end if
	hashes = content.split("\n")
	if hashes.len == 0 then
		return "The file is empty."
	end if

	valid_hashes = []
	idx = 0
	for hash_row in hashes
		if hash_row.trim() == "" then continue
		if hash_row[0] == "#" then continue // Skip comments
		if hash_row[0] == "\n" then continue // Skip empty lines
		valid_hashes.push(hash_row.trim())
		print("<b>["+idx+"]</b> " + hash_row.trim())
		idx = idx + 1
	end for

	choosen_hash_idx = user_input("Enter the index of the hash to decipher: ")
	if choosen_hash_idx == "" or choosen_hash_idx.to_int >= valid_hashes.len then
		return "No hash index provided."
	end if

	choosen_hash = valid_hashes[choosen_hash_idx.to_int]
	deciphered_content = crypto.decipher(choosen_hash)

	return "Deciphered content: " + deciphered_content
end function

file_commands = {
	"ls": {
		"description": "List files and folders in a directory.",
		"params_list": [],
		"func": @_ls_file,
	},
	"allow_import": {
		"description": "Check if the file allows import.",
		"params_list": [],
		"func": @_allow_import,
	},
	"chmod": {
		"description": "Change file permissions.",
		"params_list": ["[permissions]", "[isRecursive]"],
		"func": @_chmod,
	},
	"copy": {
		"description": "Copy the file to a new location.",
		"params_list": ["[path]", "[file_new_name]"],
		"func": @_copy,
	},
	"delete": {
		"description": "Delete the file.",
		"params_list": [],
		"func": @_delete,
	},
	"get_content": {
		"description": "Get the content of the file.",
		"params_list": [],
		"func": @_get_content,
	},
	"get_folders": {
		"description": "Get folders inside the file.",
		"params_list": [],
		"func": @_get_folders,
	},
	"get_files": {
		"description": "Get files inside the file.",
		"params_list": [],
		"func": @_get_files,
	},
	"group": {
		"description": "Get the group of the file.",
		"params_list": [],
		"func": @_group,
	},
	"has_permission": {
		"description": "Check if the file has a specific permission.",
		"params_list": ["[type_perm]"],
		"func": @_has_permission,
	},
	"is_binary": {
		"description": "Check if the file is binary.",
		"params_list": [],
		"func": @_is_binary,
	},
	"is_folder": {
		"description": "Check if the file is a folder.",
		"params_list": [],
		"func": @_is_folder,
	},
	"is_symlink": {
		"description": "Check if the file is a symlink.",
		"params_list": [],
		"func": @_is_symlink,
	},
	"move": {
		"description": "Move the file to a new location.",
		"params_list": ["[path]", "[file_new_name]"],
		"func": @_move,
	},
	"name": {
		"description": "Get the name of the file.",
		"params_list": [],
		"func": @_name,
	},
	"owner": {
		"description": "Get the owner of the file.",
		"params_list": [],
		"func": @_owner,
	},
	"parent": {
		"description": "Get the parent folder of the file.",
		"params_list": [],
		"func": @_parent,
	},
	"path": {
		"description": "Get the path of the file.",
		"params_list": ["[symlinkOrigPath]"],
		"func": @_path,
	},
	"permissions": {
		"description": "Get the permissions of the file.",
		"params_list": [],
		"func": @_permissions,
	},
	"rename": {
		"description": "Rename the file.",
		"params_list": ["[new_name]"],
		"func": @_file_rename,
	},
	"set_content": {
		"description": "Set the content of the file.",
		"params_list": ["[text]"],
		"func": @_file_set_content,
	},
	"set_group": {
		"description": "Set the group of the file.",
		"params_list": ["[groupname]", "[isRecursive]"],
		"func": @_file_set_group,
	},
	"set_owner": {
		"description": "Set the owner of the file.",
		"params_list": ["[ownername]", "[isRecursive]"],
		"func": @_file_set_owner,
	},
	"size": {
		"description": "Get the size of the file.",
		"params_list": [],
		"func": @_file_size,
	},
	"set_symlink": {
		"description": "Set the file as a symlink.",
		"params_list": ["[path]", "[file_new_name]"],
		"func": @_set_symlink,
	},
	"decipher": {
		"description": "Decipher hashed content of the file.",
		"params_list": [],
		"func": @_file_decipher,
	},
}

file_extra_commands = {
	"cd": {
		"description": "Change directory to a specified path.",
		"params_list": ["[path]"],
	},
	"exit": {
		"description": "Exit the file connection.",
		"params_list": [],
	},
	"help": {
		"description": "Show this help message.",
		"params_list": [],
	},
	"h": {
		"description": "Show this help message.",
		"params_list": [],
	},
}

_file_help = function(computer, params_list)
	output = "Available commands:\n"
	for cmd in file_commands.indexes
		output = output + "  - " + cmd + " " + file_commands[cmd].params_list.join(" ") + ": " + file_commands[cmd].description + "\n"
	end for
	for cmd in file_extra_commands.indexes
		output = output + "  - " + cmd + " " + file_extra_commands[cmd].params_list.join(" ") + ": " + file_extra_commands[cmd].description + "\n"
	end for
	return output
end function

file_connection = function(file, params_list)
	// Receives a File object and allows dynamically running methods in that class from the terminal
	while true
		command = get_user_input(null, ["[<b><color=yellow>File</color></b>]", "("+file.path+")"]).split(" ")

		func = command[0]
		params_list = command[1:]
		output = ""
		if func == "exit" then return
		if func == "cd" then
			current_folder = _file_cd(file, params_list)
			return file_connection(current_folder)
		end if
		if func == "help" or func == "h" then
			output = _file_help(file, params_list)
			print(output)
			continue
		end if

		if file_commands.hasIndex(func) then
			command_info = file_commands[func]
			if params_list.len != command_info.params_list.len then
				output = "Error: Invalid number of parameters for " + func + "\nUsage: " + func + " " + command_info.params_list.join(" ")
			else
				output = command_info.func(file, params_list)
			end if
		else if not file_extra_commands.hasIndex(func) then
			output = "Error: Command '" + func + "' not found."
		end if
		
		print(output)
	end while

end function
