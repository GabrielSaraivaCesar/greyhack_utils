// mem_overflow
// This script performs a memory overflow attack on a remote or local computer.
    
import_code("/Tools/src/crash_lib/utils/argparse.src")
import_code("/Tools/src/crash_lib/utils/metaxploit.src")
import_code("/Tools/src/crash_lib/utils/computer_explorer.src")
import_code("/Tools/src/crash_lib/utils/file_explorer.src")
import_code("/Tools/src/crash_lib/lib_scan/lib_scan_utils.src")
import_code("/Tools/src/crash_lib/utils/crash_utils.src")
crypto = include_lib("/lib/crypto.so")

params_definition = [
	{"name": "ip_address or -l", "flag":null, "flag_alt": null, "type":"str",  "default":null,}, 
	{"name": "port or lib", "flag":null, "flag_alt": null, "type":"str",  "default":null,}, 
	{"name": "memory_addr", "flag":null, "flag_alt": null, "type":"str",  "default":null,}, 
	{"name": "unsec_value", "flag":null, "flag_alt": null, "type":"str",  "default":null,}, 
	{"name": "args", "flag":"--args", "flag_alt": "-a", "type":"str",  "default":"",}, 
]

params_map = parse_args(params, params_definition)
handle_help(params, params_definition, "Scan remote library for vulnerabilities")

// Parse parameters
lib_path = params_map["port or lib"]
address =  params_map["ip_address or -l"]
port = null
if address != "-l" then
    port = params_map["port or lib"].to_int
end if
memory_zone = params_map.memory_addr
unsec_val = params_map.unsec_value
extra_args = params_map.args


metaLib = null
// Start connection
if params.indexOf("-l") == null then
	// Remote use
	net_session = metaxploit.net_use( address, port )
	if not net_session then exit("Error: can't connect to net session")
	metaLib = net_session.dump_lib
else
	// Local use
	metaLib = metaxploit.load(lib_path)
	if metaLib == null then
		metaLib = metaxploit.load(current_path+"/"+lib_path)
	end if
	if metaLib == null then
		metaLib = metaxploit.load("/lib/"+lib_path)
	end if
end if
// Overflow
result = metaLib.overflow(memory_zone, unsec_val, extra_args)

if not result then exit("Program ended")
print("The overflow resulted in ["+typeof(result)+"]")

if typeof(result) == "shell" or typeof(result) == "file" or typeof(result) == "computer" then
	old_vuln_data = find_vuln_data(metaLib, memory_zone, unsec_val)
	access_level = ""

	if old_vuln_data != null then
		access_level = old_vuln_data.access_level
	end if

	if access_level == "" then
		print()
		access_level_in = user_input("Please manually update the access level for this vulnerability in the database (""r""/""root"")/(""u""/""user"")/(""g""/""guest""): ").upper
		if access_level_in == "R" or access_level_in == "ROOT" then
			access_level = "root"
		else if access_level_in == "U" or access_level_in == "USER" then
			access_level = "user"
		else if access_level_in == "G" or access_level_in == "GUEST" then
			access_level = "guest"
		else
			exit("Invalid access level input. Exiting.")
		end if
	end if
	make_vuln_data_row(metaLib, memory_zone, unsec_val, "", typeof(result), access_level)
else if typeof(result) == "string" or typeof(result) == "number" then
	old_vuln_data = find_vuln_data(metaLib, memory_zone, unsec_val)
	access_type = ""
	
	if old_vuln_data != null then
		access_type = old_vuln_data.type
	end if
	if access_type == "" then
		print()
		access_type_in = user_input("Please manually update the exploit type for this vulnerability in the database (""p""/""passwd"")/(""f""/""firewall""): ").upper
		if access_type_in == "P" or access_type_in == "PASSWD" then
			access_type = "passwd"
		else if access_type_in == "F" or access_type_in == "FIREWALL" then
			access_type = "firewall"
		else
			exit("Invalid access type input. Exiting.")
		end if
	end if
	make_vuln_data_row(metaLib, memory_zone, unsec_val, "", access_type, "")
end if

if typeof(result) == "shell" then
    decision = user_input("Do you want to start a terminal connection? (Y/n): ")
    if decision == "y" or decision == "Y" or decision == "" then
        // Start terminal
        result.start_terminal
    else
        print("Exiting without starting a terminal.")
    end if
else if typeof(result) == "file" then
    // Handle file connection
    print("Got file. Path: " + result.path())
	file_connection(result)
else if typeof(result) == "computer" then
    // Handle computer connection
    print("Got computer. Name: " + result.get_name)
	computer_connection(result)
else if result != 1 then
	print("Error: expected shell, obtained: " + result)
end if