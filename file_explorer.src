// file_explorer
// This script provides a set of functions to interact with files and folders using the terminal.

parse_params_list = function(params_list_list, names)
	params_list_map = {}
	for idx in range(0, names.len-1)
		params_list_map[names[idx]] = params_list_list[idx]
	end for
	return params_list_map
end function

_allow_import = function(file)
	return file.allow_import
end function
	
_chmod = function(file, params_list)
	if params_list.len == 1 then
		params_list.push("false")
	end if
	params_list = parse_params_list(params_list, ["permissions", "isRecursive"])

	return file.chmod(params_list.permissions, params_list.isRecursive == "true")
end function

_copy = function(file, params_list)
	params_list = parse_params_list(params_list, ["path", "file_new_name"])
	return file.copy(params_list.path, params_list.file_new_name)
end function

_delete = function(file)
	return file.delete()
end function

_get_content = function(file)
	return file.get_content()
end function

_get_folders = function(file)
	output = "Folders in " + file.name + ":\n"
	for inner_folder in file.get_folders
		output = output + "  - " + inner_folder.name + "/\n"
	end for
	print(output)
	return ""
end function

_get_files = function(file)
	output = "Files in " + file.name + ":\n"
	for inner_file in file.get_files
		output = output + "  - " + inner_file.name + "\n"
	end for
	print(output)
	return ""
end function

_group = function(file)
	return file.group
end function

_has_permission = function(file, params_list)
	params_list = parse_params_list(params_list, ["type_perm"])
	return file.has_permission(params_list.type_perm)
end function

_is_binary = function(file)
	return file.is_binary
end function

_is_folder = function(file)
	return file.is_folder
end function

_is_symlink = function(file)
	return file.is_symlink
end function

_move = function(file, params_list)
	params_list = parse_params_list(params_list, ["path", "file_new_name"])
	return file.move(params_list.path, params_list.file_new_name)
end function

_name = function(file)
	return file.name
end function

_owner = function(file)
	return file.owner
end function

_parent = function(file)
	return file.parent.name
end function

_path = function(file, params_list)
	if params_list.len == 0 then
		params_list.push("false")
	end if
	params_list = parse_params_list(params_list, ["symlinkOrigPath"])
	return file.path(params_list.symlinkOrigPath == "true")
end function

_permissions = function(file)
	return file.permissions
end function

_rename = function(file, params_list)
	params_list = parse_params_list(params_list, ["new_name"])
	return file.rename(params_list.new_name)
end function

_set_content = function(file, params_list)
	params_list = parse_params_list(params_list, ["text"])
	return file.set_content(params_list.text)
end function

_set_group = function(file, params_list)
	if params_list.len == 1 then
		params_list.push("false")
	end if
	params_list = parse_params_list(params_list, ["groupname", "isRecursive"])
	return file.set_group(params_list.groupname, params_list.isRecursive == "true")
end function

_set_owner = function(file, params_list)
	if params_list.len == 1 then
		params_list.push("false")
	end if
	params_list = parse_params_list(params_list, ["ownername", "isRecursive"])
	return file.set_owner(params_list.ownername, params_list.isRecursive == "true")
end function

_size = function(file)
	return file.size
end function
	
_ls_file = function(folder)
	if folder.is_folder == false then
		return "This is not a folder."
	end if
	
	inner_folders = folder.get_folders
	inner_files = folder.get_files

	output = "Folders:\n"
	if inner_folders.len > 0 then
		for inner_folder in inner_folders
			r = "<color=green>R</color>"
			w = "<color=green>W</color>"
			x = "<color=green>X</color>"
			if inner_folder.has_permission("r") == false then r = "<color=red>R</color>"
			if inner_folder.has_permission("w") == false then w = "<color=red>W</color>"
			if inner_folder.has_permission("x") == false then x = "<color=red>X</color>"
			permissions_str = r + w + x

			output = output + "  - <b>" + inner_folder.name + "</b>/ "+permissions_str+"\n"
		end for
	end if
	
	if inner_files.len > 0 then
		for inner_file in inner_files
			r = "<color=green>R</color>"
			w = "<color=green>W</color>"
			x = "<color=green>X</color>"
			if inner_file.has_permission("r") == false then r = "<color=red>R</color>"
			if inner_file.has_permission("w") == false then w = "<color=red>W</color>"
			if inner_file.has_permission("x") == false then x = "<color=red>X</color>"
			permissions_str = r + w + x

			output = output + "  - <b>" + inner_file.name + "</b> "+permissions_str+"\n"
		end for
	end if

	print(output)
	return "" 
end function

_set_symlink = function(file, params_list)
	params_list = parse_params_list(params_list, ["path", "file_new_name"])
	return file.symlink(params_list.path, params_list.file_new_name)
end function

_cd = function(folder, params_list)
	params_list = parse_params_list(params_list, ["path"])
	current_file = folder
	if params_list.path == ".." then
		if folder.parent == null then
			return folder
		else
			current_file = folder.parent
		end if
	else
		inner_folders = folder.get_folders
		inner_files = folder.get_files

		for inner_folder in inner_folders
			if inner_folder.name == params_list.path then
				current_file = inner_folder
				break
			end if
		end for
		for inner_file in inner_files
			if inner_file.name == params_list.path then
				current_file = inner_file
				break
			end if
		end for
	end if

	return current_file
end function


commands = {
	"ls": {
		"description": "List files and folders in a directory.",
		"params_list": ["[path]"],
		"func": "_ls_file",
	},
	"allow_import": {
		"description": "Check if the file allows import.",
		"params_list": [],
		"func": "_allow_import",
	},
	"chmod": {
		"description": "Change file permissions.",
		"params_list": ["[permissions]", "[isRecursive]"],
		"func": "_chmod",
	},
	"copy": {
		"description": "Copy the file to a new location.",
		"params_list": ["[path]", "[file_new_name]"],
		"func": "_copy",
	},
	"delete": {
		"description": "Delete the file.",
		"params_list": [],
		"func": "_delete",
	},
	"get_content": {
		"description": "Get the content of the file.",
		"params_list": [],
		"func": "_get_content",
	},
	"get_folders": {
		"description": "Get folders inside the file.",
		"params_list": [],
		"func": "_get_folders",
	},
	"get_files": {
		"description": "Get files inside the file.",
		"params_list": [],
		"func": "_get_files",
	},
	"group": {
		"description": "Get the group of the file.",
		"params_list": [],
		"func": "_group",
	},
	"has_permission": {
		"description": "Check if the file has a specific permission.",
		"params_list": ["[type_perm]"],
		"func": "_has_permission",
	},
	"is_binary": {
		"description": "Check if the file is binary.",
		"params_list": [],
		"func": "_is_binary",
	},
	"is_folder": {
		"description": "Check if the file is a folder.",
		"params_list": [],
		"func": "_is_folder",
	},
	"is_symlink": {
		"description": "Check if the file is a symlink.",
		"params_list": [],
		"func": "_is_symlink",
	},
	"move": {
		"description": "Move the file to a new location.",
		"params_list": ["[path]", "[file_new_name]"],
		"func": "_move",
	},
	"name": {
		"description": "Get the name of the file.",
		"params_list": [],
		"func": "_name",
	},
	"owner": {
		"description": "Get the owner of the file.",
		"params_list": [],
		"func": "_owner",
	},
	"parent": {
		"description": "Get the parent folder of the file.",
		"params_list": [],
		"func": "_parent",
	},
	"path": {
		"description": "Get the path of the file.",
		"params_list": ["[symlinkOrigPath]"],
		"func": "_path",
	},
	"permissions": {
		"description": "Get the permissions of the file.",
		"params_list": [],
		"func": "_permissions",
	},
	"rename": {
		"description": "Rename the file.",
		"params_list": ["[new_name]"],
		"func": "_rename",
	},
	"set_content": {
		"description": "Set the content of the file.",
		"params_list": ["[text]"],
		"func": "_set_content",
	},
	"set_group": {
		"description": "Set the group of the file.",
		"params_list": ["[groupname]", "[isRecursive]"],
		"func": "_set_group",
	},
	"set_owner": {
		"description": "Set the owner of the file.",
		"params_list": ["[ownername]", "[isRecursive]"],
		"func": "_set_owner",
	},
	"size": {
		"description": "Get the size of the file.",
		"params_list": [],
		"func": "_size",
	},
	"set_symlink": {
		"description": "Set the file as a symlink.",
		"params_list": ["[path]", "[file_new_name]"],
		"func": "_set_symlink",
	},
}

extra_commands = {
	"cd": {
		"description": "Change directory to a specified path.",
		"params_list": ["[path]"],
	},
	"exit": {
		"description": "Exit the file connection.",
		"params_list": [],
	},
	"help": {
		"description": "Show this help message.",
		"params_list": [],
	},
	"h": {
		"description": "Show this help message.",
		"params_list": [],
	},
}

_help = function(computer, params_list)
	output = "Available commands:\n"
	for cmd in commands.indexes
		output = output + "  - " + cmd + " " + commands[cmd].params_list.join(" ") + ": " + commands[cmd].description + "\n"
	end for
	for cmd in extra_commands.indexes
		output = output + "  - " + cmd + " " + commands[cmd].params_list.join(" ") + ": " + commands[cmd].description + "\n"
	end for
	return output
end function

str_to_function = function(str, file, params_list)
	// Converts a string to a function reference
	if str == "_ls_file" then return _ls_file(file, params_list)
	if str == "_allow_import" then return _allow_import(file, params_list)
	if str == "_chmod" then return _chmod(file, params_list)
	if str == "_copy" then return _copy(file, params_list)
	if str == "_delete" then return _delete(file, params_list)
	if str == "_get_content" then return _get_content(file, params_list)
	if str == "_get_folders" then return _get_folders(file, params_list)
	if str == "_get_files" then return _get_files(file, params_list)
	if str == "_group" then return _group(file, params_list)
	if str == "_has_permission" then return _has_permission(file, params_list)
	if str == "_is_binary" then return _is_binary(file, params_list)
	if str == "_is_folder" then return _is_folder(file, params_list)
	if str == "_is_symlink" then return _is_symlink(file, params_list)
	if str == "_move" then return _move(file, params_list)
	if str == "_name" then return _name(file, params_list)
	if str == "_owner" then return _owner(file, params_list)
	if str == "_parent" then return _parent(file, params_list)
	if str == "_path" then return _path(file, params_list)
	if str == "_permissions" then return _permissions(file, params_list)
	if str == "_rename" then return _rename(file, params_list)
	if str == "_set_content" then return _set_content(file, params_list)
	if str == "_set_group" then return _set_group(file, params_list)
	if str == "_set_owner" then return _set_owner(file, params_list)
	if str == "_size" then return _size(file, params_list)
	if str == "_set_symlink" then return _set_symlink(file, params_list)
end function

file_connection = function(file)
	// Receives a File object and allows dynamically running methods in that class from the terminal
	while true
		command = get_user_input(null, ["[<b><color=yellow>File</color></b>]", "("+file.path+")"]).split(" ")

		func = command[0]
		params_list = command[1:]
		output = ""
		if func == "exit" then return
		if func == "cd" then
			current_folder = _cd(file, params_list)
			return file_connection(current_folder)
		end if
		if func == "help" or func == "h" then
			output = _help(file, params_list)
			print(output)
			continue
		end if

		if commands.hasIndex(func) then
			command_info = commands[func]
			if params_list.len != command_info.params_list.len then
				output = "Error: Invalid number of parameters for " + func + "\nUsage: " + func + " " + command_info.params_list.join(" ")
			else
				output = str_to_function(command_info.func, file, params_list)
			end if
		else if not extra_commands.hasIndex(func) then
			output = "Error: Command '" + func + "' not found."
		end if
		
		print(output)
	end while

end function
